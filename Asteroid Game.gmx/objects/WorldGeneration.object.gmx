<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Asteroids
ini_open("World_" + string(WorldID) + "/Save.ini")

if ini_key_exists("World Settings", "Seed")
{
    Seed = ini_read_real("World Settings", "Seed", 0)
}
else
{
    randomize()
    Seed = random_get_seed()
    ini_write_real("World Settings", "Seed", Seed)
    random_set_seed(Seed)
}

Sparsity = choose(0.33,0.5,1,2,3)
AsteroidDensity = round(((round(random_range(127,255) / 2) + 32) * random_range(1,3) * Sparsity) + ((room_height * room_width) / 30000))
AsteroidVariance = round(AsteroidDensity / 10) * choose(1, -1)
AsteroidNumber = AsteroidDensity + random(AsteroidVariance)
AsteroidType = random_range(1,10)

AsteroidSizes = ds_list_create()
AsteroidXs = ds_list_create()
AsteroidYs = ds_list_create()

if ini_key_exists("World Settings", "Asteroid Type")
{
    AsteroidType = ini_read_string("World Settings", "Asteroid Type", "Earthy")
}
else
{
    if AsteroidType &lt;= 4 {   AsteroidType = "Earthy"   }
    else if AsteroidType &lt;= 7 {   AsteroidType = "Rocky"   }
    else if AsteroidType &lt;= 10 {   AsteroidType = "Meteoric"   }
}

if ini_key_exists("World Settings", "Asteroid X's")
{
    aList = ini_read_string("World Settings", "Asteroid Sizes", "0")
    xList = ini_read_string("World Settings", "Asteroid X's", "0")
    yList = ini_read_string("World Settings", "Asteroid Y's", "0")
    
    ds_list_read(AsteroidSizes, aList)
    AsteroidNumber = ds_list_size(AsteroidSizes)
    ds_list_read(AsteroidXs, xList)
    ds_list_read(AsteroidYs, yList)
}

i = 0
repeat (AsteroidNumber)
{
    if ini_key_exists("World Settings", "Asteroid X's")
    {
        AsteroidSize = ds_list_find_value(AsteroidSizes, i)
        AsteroidX = ds_list_find_value(AsteroidXs, i)
        AsteroidY = ds_list_find_value(AsteroidYs, i)
    }
    else
    {
        AsteroidSize = random_range(1,6)
        AsteroidX = random(room_width)
        AsteroidY = random(room_height)
    }
    
    i += 1
    
    if AsteroidSize &lt;= 3
    {
        if AsteroidType = "Earthy"
        {
            Asteroid = instance_create(AsteroidX,AsteroidY,obj_SmallAsteroidEarthy)
            if not collision_circle(AsteroidX, AsteroidY, 8, obj_SmallAsteroidEarthy, true, false)// and not collision_circle(AsteroidX, AsteroidY, 8, obj_MediumAsteroidEarthy, true, true) and not collision_circle(AsteroidX, AsteroidY, 8, obj_BigAsteroidEarthy, true, true)
            {
                if not ini_key_exists("World Settings", "Asteroid X's")
                {
                    ds_list_add(AsteroidXs, AsteroidX)
                    ds_list_add(AsteroidYs, AsteroidY)
                    ds_list_add(AsteroidSizes, AsteroidSize)
                }
            }
            else
            {
                with Asteroid
                {
                    //image_blend = c_lime
                }
            }
        }
        else if AsteroidType = "Rocky"
        {
            Asteroid = instance_create(AsteroidX,AsteroidY,obj_SmallAsteroidRocky)
            if not ini_key_exists("World Settings", "Asteroid X's")
            {
                ds_list_add(AsteroidXs, AsteroidX)
                ds_list_add(AsteroidYs, AsteroidY)
                ds_list_add(AsteroidSizes, AsteroidSize)
            }
        }
        else if AsteroidType = "Meteoric"
        {
            Asteroid = instance_create(AsteroidX,AsteroidY,obj_SmallAsteroidMeteoric)
            if not ini_key_exists("World Settings", "Asteroid X's")
            {
                ds_list_add(AsteroidXs, AsteroidX)
                ds_list_add(AsteroidYs, AsteroidY)
                ds_list_add(AsteroidSizes, AsteroidSize)
            }
        }
    }
    else if AsteroidSize &lt;= 5
    {
        if AsteroidType = "Earthy"
        {
            Asteroid = instance_create(AsteroidX,AsteroidY,obj_MediumAsteroidEarthy)
            if not collision_circle(AsteroidX, AsteroidY, 16, obj_SmallAsteroidEarthy, true, false)// and not collision_circle(AsteroidX, AsteroidY, 16, obj_MediumAsteroidEarthy, true, true) and not collision_circle(AsteroidX, AsteroidY, 16, obj_BigAsteroidEarthy, true, true)
            {
                if not ini_key_exists("World Settings", "Asteroid X's")
                {
                    ds_list_add(AsteroidXs, AsteroidX)
                    ds_list_add(AsteroidYs, AsteroidY)
                    ds_list_add(AsteroidSizes, AsteroidSize)
                }
            }
            else
            {
                with Asteroid
                {
                    //image_blend = c_lime
                }
            }
        }
        else if AsteroidType = "Rocky"
        {
            Asteroid = instance_create(AsteroidX,AsteroidY,obj_MediumAsteroidRocky)
            if not ini_key_exists("World Settings", "Asteroid X's")
            {
                ds_list_add(AsteroidXs, AsteroidX)
                ds_list_add(AsteroidYs, AsteroidY)
                ds_list_add(AsteroidSizes, AsteroidSize)
            }
        }
        else if AsteroidType = "Meteoric"
        {
            Asteroid = instance_create(AsteroidX,AsteroidY,obj_MediumAsteroidMeteoric)
            if not ini_key_exists("World Settings", "Asteroid X's")
            {
                ds_list_add(AsteroidXs, AsteroidX)
                ds_list_add(AsteroidYs, AsteroidY)
                ds_list_add(AsteroidSizes, AsteroidSize)
            }
        }
    }
    else
    {
        if AsteroidType = "Earthy"
        {
            Asteroid = instance_create(AsteroidX,AsteroidY,obj_BigAsteroidEarthy)
            if not collision_circle(AsteroidX, AsteroidY, 32, obj_SmallAsteroidEarthy, true, false)// and not collision_circle(AsteroidX, AsteroidY, 32, obj_MediumAsteroidEarthy, true, true) and not collision_circle(AsteroidX, AsteroidY, 32, obj_BigAsteroidEarthy, true, true)
            {
                if not ini_key_exists("World Settings", "Asteroid X's")
                {
                    ds_list_add(AsteroidXs, AsteroidX)
                    ds_list_add(AsteroidYs, AsteroidY)
                    ds_list_add(AsteroidSizes, AsteroidSize)
                }
            }
            else
            {
                with Asteroid
                {
                    //image_blend = c_lime
                }
            }
        }
        else if AsteroidType = "Rocky"
        {
            Asteroid = instance_create(AsteroidX,AsteroidY,obj_BigAsteroidRocky)
            if not ini_key_exists("World Settings", "Asteroid X's")
            {
                ds_list_add(AsteroidXs, AsteroidX)
                ds_list_add(AsteroidYs, AsteroidY)
                ds_list_add(AsteroidSizes, AsteroidSize)
            }
        }
        else if AsteroidType = "Meteoric"
        {
            Asteroid = instance_create(AsteroidX,AsteroidY,obj_BigAsteroidMeteoric)
            if not ini_key_exists("World Settings", "Asteroid X's")
            {
                ds_list_add(AsteroidXs, AsteroidX)
                ds_list_add(AsteroidYs, AsteroidY)
                ds_list_add(AsteroidSizes, AsteroidSize)
            }
        }
    }
}

ini_close()
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Enemies
EnemyDensity = round(round(random_range(1,127) + 32) * random_range(1,3))
EnemyVariance = round(EnemyDensity / 5) * choose(1, -1)
EnemyNumber = EnemyDensity + random(EnemyVariance)

repeat (EnemyNumber)
{
    EnemyType = random_range(1,6)
    
    EnemyX = random(room_width)
    EnemyY = random(room_height)
    
    instance_create(EnemyX,EnemyY,obj_Borkilis)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Systems
SystemChance = round(random_range(1,3))
PlanetSystemNumber = round(power((SystemChance * 2),2) - sqrt(SystemChance))
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Player
randomize();
SpawnX = round(random(room_width))
SpawnY = round(random(room_height))
PlayerX = SpawnX
PlayerY = SpawnY

ini_open("World_" + string(WorldID) + "/Save.ini")

if ini_key_exists("World Settings", "Player X") and ini_key_exists("World Settings", "Player Y")
{   
    PlayerX = ini_read_real("World Settings", "Player X", SpawnX)
    PlayerY = ini_read_real("World Settings", "Player Y", SpawnY)
}
else if ini_key_exists("World Settings", "Spawn X") and ini_key_exists("World Settings", "Spawn Y")
{   
    PlayerX = ini_read_real("World Settings", "Spawn X", SpawnX)
    PlayerY = ini_read_real("World Settings", "Spawn Y", SpawnY)
}
else
{
    ini_write_real("World Settings", "Spawn X", SpawnX)
    ini_write_real("World Settings", "Spawn Y", SpawnY)
}

if ini_key_exists("Inventory", "Item IDs") and ini_key_exists("Inventory", "Item Numbers")
{
    i = 0
    ItemIDs = ds_list_create();
    ItemNames = ds_list_create();
    ItemSprites = ds_list_create();
    ItemSubimages = ds_list_create();
    ItemNumbers = ds_list_create();
    Inventory = ds_grid_create(6, 4);
    ds_list_read(ItemIDs, ini_read_string("Inventory", "Item IDs", "0"))
    ds_list_read(ItemNames, ini_read_string("Inventory", "Item Names", "0"))
    ds_list_read(ItemSprites, ini_read_string("Inventory", "Item Sprites", "0"))
    ds_list_read(ItemSubimages, ini_read_string("Inventory", "Item Subimages", "0"))
    ds_list_read(ItemNumbers, ini_read_string("Inventory", "Item Numbers", "0"))
    for (yy = 0; yy &lt; 4; yy += 1)
    {
        for (xx = 0; xx &lt; 6; xx += 1)
        {
            if round(ds_list_find_value(ItemNumbers, i)) = ds_list_find_value(ItemNumbers, i)
            {
                ItemProperties = ds_list_create();
                ds_list_add(ItemProperties, ds_list_find_value(ItemIDs, i))
                ds_list_add(ItemProperties, ds_list_find_value(ItemNames, i))
                ds_list_add(ItemProperties, ds_list_find_value(ItemSprites, i))
                ds_list_add(ItemProperties, ds_list_find_value(ItemSubimages, i))
                ds_list_add(ItemProperties, ds_list_find_value(ItemNumbers, i))
                ds_grid_add(Inventory, xx, yy, ItemProperties)
            }
            else
            {
                break;
            }
            i += 1
        }
    }
}

ini_close()
instance_create(PlayerX, PlayerY, obj_Player)

alarm[0] = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Autosave World
ini_open("Asteroid Game/Saves/" + string(WorldID) + "/Save.ini")

ini_write_string("World Settings", "Asteroid Type", AsteroidType)
aS = ds_list_write(AsteroidSizes)
aX = ds_list_write(AsteroidXs)
aY = ds_list_write(AsteroidYs)
ini_write_string("World Settings", "Asteroid Sizes", aS)
ini_write_string("World Settings", "Asteroid X's", aX)
ini_write_string("World Settings", "Asteroid Y's", aY)
ini_write_real("World Settings", "Player Y", round(obj_Player.y))
ini_write_real("World Settings", "Player X", round(obj_Player.x))

InventoryIDs = ds_list_create();
InventoryNames = ds_list_create();
InventorySprites = ds_list_create();
InventorySubimages = ds_list_create();
InventoryNumbers = ds_list_create();
for (yy = 0; yy &lt; ds_grid_height(obj_Inventory.Inventory); yy += 1)
{
    for (xx = 0; xx &lt; ds_grid_width(obj_Inventory.Inventory); xx += 1)
    {
        ItemProperties = ds_grid_get(obj_Inventory.Inventory, xx, yy)
        ds_list_add(InventoryIDs, ds_list_find_value(ItemProperties, 0))
        ds_list_add(InventoryNames, ds_list_find_value(ItemProperties, 1))
        ds_list_add(InventorySprites, ds_list_find_value(ItemProperties, 2))
        ds_list_add(InventorySubimages, ds_list_find_value(ItemProperties, 3))
        ds_list_add(InventoryNumbers, ds_list_find_value(ItemProperties, 4))
    }
}

IDs = ds_list_write(InventoryIDs)
iNa = ds_list_write(InventoryNames)
iSp = ds_list_write(InventorySprites)
iSu = ds_list_write(InventorySubimages)
iNu = ds_list_write(InventoryNumbers)
ini_write_string("Inventory", "Item IDs", IDs)
ini_write_string("Inventory", "Item Numbers", iNa)
ini_write_string("Inventory", "Item Sprites", iSp)
ini_write_string("Inventory", "Item Subimages", iSu)
ini_write_string("Inventory", "Item Numbers", iNu)

ini_write_real("Ship Statistics", "Max Health", obj_Player.PlayerMaxHealth)
ini_write_real("Ship Statistics", "Health", obj_Player.PlayerHealth)
ini_write_real("Ship Statistics", "Max Energy", obj_Player.PlayerMaxEnergy)
ini_write_real("Ship Statistics", "Energy", obj_Player.PlayerEnergy)

ini_close()

alarm[0] = room_speed * 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Player
SpawnChunk = random_range(1,100)
SpawnPointX = random_range((room_width/2) - (room_width/8), (room_width/2) + (room_width/8))
SpawnPointY = random_range((room_height/2) - (room_height/8), (room_height/2) + (room_height/8))

while not place_empty(SpawnPointX,SpawnPointY)
{
    random_get_seed()
    SpawnPointX = random_range((room_width/2) - (room_width/8), (room_width/2) + (room_width/8))
    random_get_seed()
    SpawnPointY = random_range((room_height/2) - (room_height/8), (room_height/2) + (room_height/8))
}

instance_create(SpawnPointX, SpawnPointY, obj_Player)

for (i = 1; i &lt;= 100; i += 1)
{
    Overworld[i] = room_add();
    Chunk = Overworld[i];
    room_set_width(Chunk, 9600);
    room_set_height(Chunk, 9600);
    room_set_persistent(Chunk, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw World Variables
draw_set_font(obj_FontCreator.SmallGameFont)
draw_set_halign(fa_right)

draw_text_color(640, 0, AsteroidNumber, c_white, c_white, c_white, c_white, 1)
draw_text_color(640, 16, AsteroidVariance, c_white, c_white, c_white, c_white, 1)

draw_text_color(640, 48, SystemChance, c_white, c_white, c_white, c_white, 1)
draw_text_color(640, 64, PlanetSystemNumber, c_white, c_white, c_white, c_white, 1)

draw_text_color(640, 112, EnemyDensity, c_white, c_white, c_white, c_white, 1)
draw_text_color(640, 128, EnemyVariance, c_white, c_white, c_white, c_white, 1)

draw_set_font(obj_FontCreator.GameFont)
draw_set_halign(fa_left)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
