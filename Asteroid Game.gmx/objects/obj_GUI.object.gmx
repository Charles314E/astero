<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_GUI</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
UpgradesShown = 0
CommandInput = false
GameMenu = false
CommandMessage = ""
CommandMessageColor = c_white
Command = ""
CheatCursor = true
CommandPrompt = false
MultiStageCommand = true

TpX = ""
TpY = ""

alarm[3] = room_speed / 12

BackingHealth = 100
BackingEnergy = 100

Transparency = 1
BackingTransparency = 0.5

Damaged = false
UsedEnergy = 0

instance_create(0, 0, obj_Inventory)
instance_create(0, 0, obj_Abilities)
instance_create(0, 0, obj_FontCreator)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gradually Increase Health
if obj_Player.PlayerHealth &lt; PlayerNewHealth / obj_Player.PlayerMaxHealth * 100
{
    obj_Player.PlayerHealth += obj_Player.PlayerMaxHealth / 100
    alarm[5] = room_speed / round(obj_Player.PlayerMaxHealth / 2)
}
else if obj_Player.PlayerHealth &gt; PlayerNewHealth / obj_Player.PlayerMaxHealth * 100
{
    obj_Player.PlayerHealth = PlayerNewHealth / obj_Player.PlayerMaxHealth * 100
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gradually Damage Health and Energy
if Damaged = true
{
    if BackingHealth &gt; obj_Player.PlayerHealth / obj_Player.PlayerMaxHealth * 100
    {
        BackingHealth -= 1
        alarm[4] = room_speed / 30
    }
    else if BackingHealth &lt; obj_Player.PlayerHealth / obj_Player.PlayerMaxHealth * 100
    {
        BackingHealth = obj_Player.PlayerHealth / obj_Player.PlayerMaxHealth * 100
        Damaged = false
    }
}

if UsedEnergy = true
{
    if BackingEnergy &gt; obj_Player.PlayerEnergy / obj_Player.PlayerMaxEnergy * 100
    {
        BackingEnergy -= 1
        alarm[4] = room_speed / 30
    }
    else if BackingEnergy &lt; obj_Player.PlayerEnergy / obj_Player.PlayerMaxEnergy * 100
    {
        BackingEnergy = obj_Player.PlayerEnergy / obj_Player.PlayerMaxEnergy * 100
        UsedEnergy = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hide Cursor of Cheat Console
CheatCursor = false
alarm[2] = room_speed / 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show Cursor of Cheat Console
CheatCursor = true
alarm[3] = room_speed / 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refresh Command Message
CommandMessage = ""
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show Upgrades
if UpgradesShown = 0.5
{
    UpgradesShown = 1
}
else if UpgradesShown = 1.5
{
    UpgradesShown = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Open Command Console

if keyboard_check_pressed(ord("`")) and CommandInput = false
{
    keyboard_string = ""
    PreviousCommand = ""
    CommandInput = true
}
else if keyboard_check_pressed(ord("`")) and CommandInput = true
{
    keyboard_string = ""
    CommandInput = false
}
else if keyboard_check_pressed(vk_up) and CommandInput = true
{
    keyboard_string = PreviousCommand
}
else if keyboard_check_pressed(vk_down) and CommandInput = true
{
    keyboard_string = ""
}

keyboard_string = string_copy(keyboard_string,0,50)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Command Console Processing
if CommandInput = true and keyboard_check_pressed(vk_enter)
{
    CommandCorrect = false
    PreviousCommand = string_copy(keyboard_string,0,50)
    
    //God Mode
    Command = "godmode"
    if string_copy(keyboard_string, 0, string_length(Command)) = Command
    {
        CommandCorrect = true
        if keyboard_string = "godmode on"
        {
            obj_Player.GodMode = true
            CommandMessageColor = c_white
            CommandMessage = "God Mode has been turned on."
        }
        else if keyboard_string = "godmode off"
        {
            obj_Player.GodMode = false
            CommandMessageColor = c_white
            CommandMessage = "God Mode has been turned off."
        }
        else
        {
            CommandMessageColor = c_red
            CommandMessage = "[SYNTAX ERROR:] Usage: 'godmode &lt;on/off&gt;'"
        }
    }
    
    //No Clip
    Command = "noclip"
    if string_copy(keyboard_string, 0, string_length(Command)) = Command
    {
        CommandCorrect = true
        if keyboard_string = "noclip on"
        {
            obj_Player.NoClip = true
            CommandMessageColor = c_white
            CommandMessage = "You are now Intangible."
        }
        else if keyboard_string = "noclip off"
        {
            obj_Player.NoClip = false
            CommandMessageColor = c_white
            CommandMessage = "You are now Tangible."
        }
        else
        {
            CommandMessageColor = c_red
            CommandMessage = "[SYNTAX ERROR:] Usage: 'noclip &lt;on/off&gt;'"
        }
    }
    
    //Kill
    Command = "kill"
    if string_copy(keyboard_string, 0, string_length(Command)) = Command
    {
        CommandCorrect = true
        obj_Player.PlayerHealth = 0
        CommandMessageColor = c_white
        CommandMessage = "That must have hurt..."
    }
    
    //Spawn
    Command = "spawnpoint"
    if string_copy(keyboard_string, 0, string_length(Command)) = Command
    {
        CommandCorrect = true
        obj_Player.x = SpawnPoint.SpawnPointX
        obj_Player.y = SpawnPoint.SpawnPointY
        CommandMessageColor = c_white
        CommandMessage = "Teleported to spawn at " + string(SpawnPoint.SpawnPointX) + ", " + string(SpawnPoint.SpawnPointY) + "."
    }
    Command = "setspawn"
    if string_copy(keyboard_string, 0, string_length(Command)) = Command
    {
        CommandCorrect = true
        SpawnPoint.SpawnPointX = obj_Player.x
        SpawnPoint.SpawnPointY = obj_Player.y
        CommandMessageColor = c_white
        CommandMessage = "Set spawn to " + string(SpawnPoint.SpawnPointX) + ", " + string(SpawnPoint.SpawnPointY) + "."
    }
    
    ///Constant Drops
    Command = "constantdrops"
    if string_copy(keyboard_string, 0, string_length(Command)) = Command
    {
        CommandCorrect = true
        if keyboard_string = "constantdrops health on"
        {
            obj_Player.ConstantHealthDrops = true
            CommandMessage = "Health drops will now always spawn."
        }
        else if keyboard_string = "constantdrops health off"
        {
            obj_Player.ConstantHealthDrops = false
            CommandMessage = "Health drops will now always spawn."
        }
        else if keyboard_string = "constantdrops energy on"
        {
            obj_Player.ConstantEnergyDrops = true
            CommandMessage = "Energy drops will no longer always spawn."
        }
        else if keyboard_string = "constantdrops energy off"
        {
            obj_Player.ConstantEnergyDrops = false
            CommandMessage = "Energy drops will no longer always spawn."
        }
        else
        {
            CommandMessageColor = c_red
            CommandMessage = "[SYNTAX ERROR:] Usage: 'constantdrops &lt;health/energy&gt; &lt;on/off&gt;'"
        }
    }
    
    //Teleport
    Incorrect = true
    Command = "teleport"
    if string_copy(keyboard_string, 0, string_length(Command)) = Command
    {
        CommandCorrect = true
        if string_copy(keyboard_string, string_length(Command), string_length(Command)+1) = " "
        {
            TpX = ""
            index = string_length(Command) + 2
            while string_pos(string_copy(keyboard_string, index, 1), "0123456789.")
            {
                TpX += string_copy(keyboard_string, index, 1)
                index += 1
                if not string_pos(string_copy(keyboard_string, index+1, 1), "0123456789. ")
                {
                    CommandMessageColor = c_red
                    CommandMessage = "[SYNTAX ERROR:] Usage: 'teleport &lt;x&gt; &lt;y&gt; &lt;z&gt;'"
                    Incorrect = true
                }
            }
            TpX = real(TpX)
            if string_copy(keyboard_string, index-1, 1) = " " and Incorrect = false
            {
                index += 1
            }
            else
            {
                CommandMessageColor = c_red
                CommandMessage = "[SYNTAX ERROR:] Usage: 'teleport &lt;x&gt; &lt;y&gt;'"
                Incorrect = true
            }
            TpY = ""
            while string_pos(string_copy(keyboard_string, index, 1), "0123456789.") and Incorrect = false
            {
                TpY += string_copy(keyboard_string, index, 1)
                index += 1
                if not string_pos(string_copy(keyboard_string, index+1, 1), "0123456789.")
                {
                    CommandMessageColor = c_red
                    CommandMessage = "[SYNTAX ERROR:] Usage: 'teleport &lt;x&gt; &lt;y&gt; &lt;z&gt;'"
                    Incorrect = true
                }
            }
            TpY = real(TpY)
            if Incorrect = false
            {
                CommandMessageColor = c_white
                CommandMessage = "Teleported to " + string(TpX) + string(TpY) + "."
            }
        }
        else
        {
            CommandMessageColor = c_red
            CommandMessage = "[SYNTAX ERROR:] Usage: 'teleport &lt;x&gt; &lt;y&gt;'"
        }
        /*
        obj_Player.x = TpX
        obj_Player.y = TpY
        CommandMessageColor = c_white
        CommandMessage = "Teleported to " + string(TpX) + string(TpY) + "."
        */
    }
    
    //Unrecognised Command
    if CommandCorrect = false
    {
        CommandMessageColor = c_red
        CommandMessage = "[SYNTAX ERROR:] '" + keyboard_string + "' is not a valid command."
    }
    
    CommandInput = false
    alarm[1] = room_speed * 10
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hide GUI
if place_meeting(x, y, obj_Player)
{
    Transparency = 0.5
    BackingTransparency = 0
}
else
{
    Transparency = 1
    BackingTransparency = 0.5
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show Upgrades
if CommandInput = false and ShowingTextBox = false
{
    if UpgradesShown = 0
    {
        alarm[0] = room_speed / 60
        UpgradesShown = 0.5
    }
    else if UpgradesShown = 1
    {
        UpgradesShown = 1.5
        alarm[0] = room_speed / 45
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HUD
if instance_exists(obj_Player)
{
    draw_set_alpha(BackingTransparency)
    if Damaged = true
    {
        draw_healthbar(36,33,139,45,BackingHealth,c_black,c_red,c_red,0,false,false)
    }
    draw_sprite_part_ext(spr_EnergyBar, 1, 0, 0, (BackingEnergy / 100) * sprite_get_width(spr_EnergyBar), sprite_get_height(spr_EnergyBar), 36, 49 ,1 , 1, c_white, Transparency)
    draw_set_alpha(Transparency)
    
    if (obj_Player.PlayerHealth / obj_Player.PlayerMaxHealth) * 100 &gt; 50
    {
        draw_set_alpha(Transparency)
        draw_healthbar(36,33,139,45,obj_Player.PlayerHealth / obj_Player.PlayerMaxHealth * 100,c_black,c_green,c_green,0,false,false)
    }
    else if (obj_Player.PlayerHealth / obj_Player.PlayerMaxHealth) * 100 &gt; 20
    {
        draw_set_alpha(Transparency)
        draw_healthbar(36,33,139,45,obj_Player.PlayerHealth / obj_Player.PlayerMaxHealth * 100,c_black,c_yellow,c_yellow,0,false,false)
    }
    else
    {
        draw_set_alpha(Transparency)
        draw_healthbar(36,33,139,45,obj_Player.PlayerHealth / obj_Player.PlayerMaxHealth * 100,c_black,c_red,c_red,0,false,false)
    }
    
    draw_set_alpha(Transparency)
    draw_sprite_part_ext(spr_EnergyBar, 0, 0, 0, (sprite_get_width(spr_EnergyBar) / 100) * (obj_Player.PlayerEnergy / obj_Player.PlayerMaxEnergy * 100), sprite_get_height(spr_EnergyBar), 36, 49, 1, 1, c_white, Transparency)
    
    if UpgradesShown = 0
    {
        draw_sprite_ext(spr_GUI,0,0,0,1,1,0,c_white,Transparency)
    }
    else if UpgradesShown = 0.5
    {
        draw_sprite_ext(spr_GUI,-1,0,0,1,1,0,c_white,Transparency)
    }
    else if UpgradesShown = 1
    {
        draw_sprite_ext(spr_GUI,5,0,0,1,1,0,c_white,Transparency)
    }
    else if UpgradesShown = 1.5
    {
        draw_sprite_ext(spr_GUI,5,0,0,1,1,0,c_white,Transparency)
    }
    
    draw_set_font(obj_FontCreator.GameFont);
    draw_set_halign(fa_center)
    draw_text_color(38, 16, obj_Player.PlayerHealth, c_white, c_white, c_white, c_white, Transparency); draw_text_color(81, 16, obj_Player.PlayerMaxHealth, c_white, c_white, c_white, c_white, Transparency)
    
    draw_set_font(obj_FontCreator.SmallGameFont);
    draw_set_halign(fa_center)
    draw_text_color(100, 55, obj_Player.PlayerEnergy, c_white, c_white, c_white, c_white, Transparency); draw_text_color(124, 55, obj_Player.PlayerMaxEnergy, c_white, c_white, c_white, c_white, Transparency)
    
    draw_text_color(12, 0, obj_Player.speed,c_white,c_white,c_white,c_white,Transparency)
    draw_text_color(12, 16, obj_Player.direction,c_white,c_white,c_white,c_white,Transparency)
    draw_text_color(12, 32, round(obj_Player.x),c_white,c_white,c_white,c_white,Transparency)
    draw_text_color(12, 48, round(obj_Player.y),c_white,c_white,c_white,c_white,Transparency)
    
    if CommandInput = false
    {
        if UpgradesShown = 1
        {
            draw_sprite_ext(spr_ThrusterIcons,obj_Player.ThrusterLevel,8,104,1,1,0,c_white,Transparency)
            draw_set_font(fnt_SmallGameFont);
            draw_sprite_ext(spr_CannonIcons,obj_Player.CannonLevel,32,104,1,1,0,c_white,Transparency)
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Cheat Console
x = view_xview
y = view_yview

if CommandInput = true
{
    draw_set_alpha(0.25)
    draw_rectangle_color(0,650,960,666,c_dkgray,c_dkgray,c_dkgray,c_dkgray,false)
    
    draw_set_alpha(1)
    draw_set_font(obj_FontCreator.GameFont);
    draw_set_halign(fa_left)
    if CheatCursor = true
    {
        draw_text_color(64,650,"[&gt;&gt;:] " + keyboard_string + "_",c_white,c_white,c_white,c_white,1)
    }
    if CheatCursor = false
    {
        draw_text_color(64,650,"[&gt;&gt;:] " + keyboard_string,c_white,c_white,c_white,c_white,1)
    }
}

draw_set_halign(fa_left)
draw_text_color(64,630,CommandMessage,CommandMessageColor,CommandMessageColor,CommandMessageColor,CommandMessageColor,1)
draw_text_color(64,690,ds_list_write(WorldGeneration.InventoryIDs),CommandMessageColor,CommandMessageColor,CommandMessageColor,CommandMessageColor,1)
draw_text_color(64,706,ds_list_write(WorldGeneration.InventoryNumbers),CommandMessageColor,CommandMessageColor,CommandMessageColor,CommandMessageColor,1)

//draw_text_color(64,390,TpX,c_white,c_white,c_white,c_white,1)
//draw_text_color(64,410,TpY,c_white,c_white,c_white,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///event_blocked()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Menu
if GameMenu = false
{
    instance_create(view_xview, view_yview, obj_FadeMenu)
    GameMenu = true
}
else
{
    with obj_ResumeGameButton
    {
        instance_destroy()
    }
    with obj_BackToTitleButton
    {
        instance_destroy()
    }
    with obj_ExitButton
    {
        instance_destroy()
    }
    with obj_FadeMenu
    {
        instance_destroy()
    }
    GameMenu = false
    instance_activate_all()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
