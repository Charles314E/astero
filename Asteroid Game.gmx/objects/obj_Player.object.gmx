<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ShipBase</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
direction = 90
PlayerDead = false
Invulnerable = false
Charging = false

ChargeTime = 0
BeamChargeTime = 0

ShotDelay = 1
ShotCooldown = 0

DamageTextAlpha = 1
DamageTextHeight = 16
Alpha = 1
zscale = 1

GodMode = false
NoClip = true
alarm[0] = room_speed * 3
ConstantHealthDrops = false
ConstantEnergyDrops = false

ShowDamage = false

globalvar ShowingTextBox;
global.TextboxMessage = "";

ini_open("World_" + string(WorldID) + ".ini")

PlayerHealth    = ini_read_real("Ship Statistics", "Health", 100)
PlayerMaxHealth = ini_read_real("Ship Statistics", "Max Health", 100)
PlayerEnergy    = ini_read_real("Ship Statistics", "Energy", 100)
PlayerMaxEnergy = ini_read_real("Ship Statistics", "Max Energy", 100)

x = ini_read_real("World Settings", "Player X", 0)
y = ini_read_real("World Settings", "Player Y", 0)

if PlayerHealth = 0
{
    PlayerHealth = PlayerMaxHealth
    PlayerEnergy = PlayerMaxEnergy
    x = ini_read_real("World Settings", "Spawn X", 0)
    y = ini_read_real("World Settings", "Spawn Y", 0)
}

ini_close()

CannonLevel = 0
ThrusterLevel = 1
ChargeShot = false
DoubleShot = false
TripleShot = false
FireShot = false
IceShot = false
LightningShot = false
PiercingShot = false
RapidFire = false

LaserBeam = false
ChargeLaser = false
BloodLaser = false
CardinalLaser = false
OctagonalLaser = false

ShowingTextBox = false

instance_create(0, 0, obj_GUI)
obj_GUI.BackingHealth = PlayerHealth / PlayerMaxHealth * 100
obj_GUI.BackingEnergy = PlayerEnergy / PlayerMaxEnergy * 100

RightThrusterX = 10
LeftThrusterX  = -10
RightThrusterY = 10
LeftThrusterY  = -10
    
RightCannonX = 6
LeftCannonX  = -6
RightCannonY = 12
LeftCannonY  = -12
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Locate Coloring
ini_open("World_" + string(WorldID) + "/Save.ini")

BHUE = ini_read_real("Ship Appearance", "Base Hue", false)
BSAT = ini_read_real("Ship Appearance", "Base Saturation", false)
BVAL = ini_read_real("Ship Appearance", "Base Value", false)
ShipBase = ini_read_real("Ship Appearance", "Base Number", false)
    
VHUE = ini_read_real("Ship Appearance", "Visor Hue", false)
VSAT = ini_read_real("Ship Appearance", "Visor Saturation", false)
VVAL = ini_read_real("Ship Appearance", "Visor Value", false)
ShipVisor = ini_read_real("Ship Appearance", "Visor Number", false)
    
MHP = ini_read_real("Ship Statistics", "Max Health", false)
MEP = ini_read_real("Ship Statistics", "Max Energy", false)
HP = ini_read_real("Ship Statistics", "Health", false)
EP = ini_read_real("Ship Statistics", "Energy", false)

ShipBaseFinalColor = make_color_hsv(BHUE, BSAT, BVAL)
ShipVisorFinalColor = make_color_hsv(VHUE, VSAT, VVAL)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Beam Attributes
FiringBeam = false;
BeamEnergyDrain = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Shot Cooldown
ShotCooldown = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade Out Screen
instance_create(0, 0, obj_FadeOutScreen)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Vulnerability
Invulnerable = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Noclip Off
NoClip = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Firing
if (obj_GUI.CommandInput = false and obj_GUI.GameMenu = false) and ShowingTextBox = false
{
    ///Defining Input Logic
    if FiringBeam = false
    {
        if keyboard_check(ord("A")) { direction += 5 }
        if keyboard_check(ord("D")) { direction -= 5 }
    }
    else if FiringBeam = true
    {
        if keyboard_check(ord("A")) { direction += 1 }
        if keyboard_check(ord("D")) { direction -= 1 }
    }
    image_angle = direction - 90

    var RightThrusterXPos; RightThrusterXPos = x + lengthdir_x(10, image_angle);
    var LeftThrusterXPos; LeftThrusterXPos = x + lengthdir_x(-10, image_angle);
    var RightThrusterYPos; RightThrusterYPos = y + lengthdir_y(10, image_angle);
    var LeftThrusterYPos; LeftThrusterYPos = y + lengthdir_y(-10, image_angle);
    
    var RightCannonXPos; RightCannonXPos = x + lengthdir_x(6, image_angle);
    var LeftCannonXPos; LeftCannonXPos = x + lengthdir_x(-6, image_angle);
    var RightCannonYPos; RightCannonYPos = y + lengthdir_y(12, image_angle);
    var LeftCannonYPos; LeftCannonYPos = y + lengthdir_y(-12, image_angle);
    
    if FiringBeam = false
    {
        if keyboard_check(ord("W")) 
        {
            if ThrusterLevel = 0        { speed = 5; effect_create_below(ef_flare,RightThrusterXPos,RightThrusterYPos,0.1,c_yellow); effect_create_below(ef_flare,LeftThrusterXPos,LeftThrusterYPos,0.1,c_yellow) }
            else if ThrusterLevel = 1   { speed = 5.5; effect_create_below(ef_flare,RightThrusterXPos,RightThrusterYPos,0.15,c_orange); effect_create_below(ef_flare,LeftThrusterXPos,LeftThrusterYPos,0.15,c_orange) }
            else if ThrusterLevel = 2   { speed = 6; effect_create_below(ef_flare,RightThrusterXPos,RightThrusterYPos,0.2,c_red); effect_create_below(ef_flare,LeftThrusterXPos,LeftThrusterYPos,0.2,c_red) }
            else if ThrusterLevel = 3   { speed = 6.5; effect_create_below(ef_flare,RightThrusterXPos,RightThrusterYPos,0.25,c_blue); effect_create_below(ef_flare,LeftThrusterXPos,LeftThrusterYPos,0.25,c_blue) }
            else if ThrusterLevel = 4   { speed = 7; effect_create_below(ef_flare,RightThrusterXPos,RightThrusterYPos,0.3,c_green); effect_create_below(ef_flare,LeftThrusterXPos,LeftThrusterYPos,0.3,c_green) }
            else if ThrusterLevel = 5   { speed = 7.5; effect_create_below(ef_flare,RightThrusterXPos,RightThrusterYPos,0.35,c_purple); effect_create_below(ef_flare,LeftThrusterXPos,LeftThrusterYPos,0.35,c_purple) }
            else if ThrusterLevel = 6   { speed = 8; effect_create_below(ef_flare,RightThrusterXPos,RightThrusterYPos,0.4,c_white); effect_create_below(ef_flare,LeftThrusterXPos,LeftThrusterYPos,0.4,c_white) }
            else if ThrusterLevel = 7   { speed = 9; effect_create_below(ef_flare,RightThrusterXPos,RightThrusterYPos,0.45,c_navy); effect_create_below(ef_flare,RightThrusterXPos,RightThrusterYPos,0.25,c_black); effect_create_below(ef_flare,LeftThrusterXPos,LeftThrusterYPos,0.45,c_navy); effect_create_below(ef_flare,LeftThrusterXPos,LeftThrusterYPos,0.25,c_black) }
        }
        else if keyboard_check(ord("S")) 
        {
            if ThrusterLevel = 0        { speed = -2.5 }
            else if ThrusterLevel = 1   { speed = -2.75 }
            else if ThrusterLevel = 2   { speed = -3 }
            else if ThrusterLevel = 3   { speed = -3.25 }
            else if ThrusterLevel = 4   { speed = -3.5 }
            else if ThrusterLevel = 5   { speed = -3.75 }
            else if ThrusterLevel = 6   { speed = -4 }
            else if ThrusterLevel = 7   { speed = -4.5 }
        }
        else 
        {
            if speed &gt; 0
            {
                {
                    speed -= 0.25;
                }
                effect_clear() 
            }
            else if speed &lt; 0
            {
                {
                    speed += 0.25;
                }
            }
        }
    }
    
    SpecialShot = false
    if keyboard_check(vk_space) and keyboard_check(ord("1")) and FiringBeam = false
    {
        ChargeTime += 1
        SpecialShot = true
    }
    else if keyboard_check(vk_space) and keyboard_check(ord("2")) and FiringBeam = false and PlayerEnergy &gt; BeamEnergyDrain
    {
        BeamChargeTime += 1
        SpecialShot = true
    }
    if keyboard_check_pressed(vk_space) and keyboard_check(ord("1")) and FiringBeam = false
    {
        instance_create(x, y, obj_ChargingShot)
    }
    else if keyboard_check_pressed(vk_space) and keyboard_check(ord("2")) and FiringBeam = false and PlayerEnergy &gt; BeamEnergyDrain
    {
        instance_create(x, y, obj_ChargingBeam)
    }
    if keyboard_check_pressed(vk_space) and SpecialShot = false and ShotCooldown = 0 and FiringBeam = false
    {
        instance_create(LeftCannonXPos, LeftCannonYPos, obj_Bullet)
        instance_create(RightCannonXPos, RightCannonYPos, obj_Bullet)
        ShotCooldown = 1
        alarm[4] = room_speed / 5
    }
    
    if ThrusterLevel &lt; 0
    {
        ThrusterLevel = 7
    }
    else if ThrusterLevel &gt; 7
    {
        ThrusterLevel = 0
    }

    if CannonLevel &lt; 0
    {
        CannonLevel = 7
    }
    else if CannonLevel &gt; 7
    {
        CannonLevel = 0
    }

    if obj_GUI.BackingHealth &lt;= 0 and PlayerDead = false
    {
        PlayerDead = true
        effect_create_above(ef_explosion,x,y,0.5,c_white)
        alarm[2] = (room_speed / 3) * 2
    }

    if PlayerHealth &gt; PlayerMaxHealth
    {
        PlayerHealth = PlayerMaxHealth
    }
    else if PlayerHealth &lt; 0
    {
        PlayerHealth = 0
    }

    if PlayerEnergy &gt; PlayerMaxEnergy
    {
        PlayerEnergy = PlayerMaxEnergy
    }
    else if PlayerEnergy &lt; 0
    {
        PlayerEnergy = 0
    }
}
else
{
    speed = 0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Command Logic
Alpha = 0.5
if NoClip = false
{
    Alpha = 1
    if collision_circle(x,y,6,obj_SmallAsteroidEarthy,false,false)
    {
        speed = -3
        friction = 0.1
    }
}

if GodMode = true
{
    PlayerHealth = PlayerMaxHealth
    PlayerEnergy = PlayerMaxEnergy
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_SmallAsteroidEarthy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Take Damage
if Invulnerable = false and NoClip = false
{
    effect_create_below(ef_explosion,x,y,0.005,c_dkgray)
    DamageTaken = other.Damage
    with instance_create(x, y-12, obj_DamageText)
    {
        Damage = other.DamageTaken
    }
    PlayerHealth -= DamageTaken
    Invulnerable = true
    alarm[1] = room_speed * 0.25
    obj_GUI.Damaged = true
    obj_GUI.alarm[4] = (room_speed / 3) * 2
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Cutscene
global.Cutscene = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move Rooms
/*
if x &gt; 9600
{
    room = room + 1
}
else if x &lt; 9600 and not room = ow_Chunk001
{
    room = room - 1
}
else if y &gt; 9600
{
    room = room + 10
}
else if y &lt; 9600 and not room = ow_Chunk001
{
    room = room - 10
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite
draw_sprite_ext(spr_Cannons,CannonLevel,x,y,zscale,zscale,image_angle,c_white,Alpha)
draw_sprite_ext(spr_ShipBase,ShipBase,x,y,zscale,zscale,image_angle,ShipBaseFinalColor,Alpha)
draw_sprite_ext(spr_ShipVisor,ShipVisor,x,y,zscale,zscale,image_angle,ShipVisorFinalColor,Alpha)

if Invulnerable = true
{
    draw_sprite_ext(spr_ShipBase,0,x,y,zscale,zscale,image_angle,c_red,0.5)
    draw_sprite_ext(spr_ShipVisor,0,x,y,zscale,zscale,image_angle,c_red,0.5)
    draw_sprite_ext(spr_Cannons,CannonLevel,x,y,zscale,zscale,image_angle,c_red,0.5)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Show Mini Healthbar and Energybar
draw_set_alpha(0.5)
draw_healthbar(x-10,y-16,x+10,y-11,obj_GUI.BackingHealth,c_black,c_red,c_red,0,true,true)
draw_healthbar(x-10,y-10,x+10,y-9,obj_GUI.BackingEnergy,c_black,c_purple,c_purple,0,true,true)
draw_set_alpha(1)

depth = obj_GUI.depth
if (PlayerHealth / PlayerMaxHealth) * 100 &gt; 50
{
    draw_healthbar(x-10,y-16,x+10,y-11,(PlayerHealth/PlayerMaxHealth)*100,c_dkgray,c_green,c_green,0,false,true)
}
else if (PlayerHealth / PlayerMaxHealth) * 100 &gt; 20
{
    draw_healthbar(x-10,y-16,x+10,y-11,(PlayerHealth/PlayerMaxHealth)*100,c_dkgray,c_yellow,c_yellow,0,false,true)
}
else
{
    draw_healthbar(x-10,y-16,x+10,y-11,(PlayerHealth/PlayerMaxHealth)*100,c_dkgray,c_red,c_red,0,false,true)
}

draw_healthbar(x-10,y-10,x+10,y-9,(PlayerEnergy/PlayerMaxEnergy)*100,c_dkgray,c_aqua,c_aqua,0,false,true)

depth = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
